% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make-array.R
\name{makeArray}
\alias{makeArray}
\alias{makeMR}
\alias{deriveArray}
\title{Make a Categorical Array or Multiple Response variable}
\usage{
makeArray(subvariables, name, ...)

makeMR(subvariables, name, selections, ...)

deriveArray(subvariables, name, selections, ...)
}
\arguments{
\item{subvariables}{a list of Variable objects to bind together, or a
Dataset subset which contains only the Variables to bind.}

\item{name}{character, the name that the new Categorical Array variable
should have.}

\item{...}{Optional additional attributes to set on the new variable.}

\item{selections}{character, for \code{makeMR} and \code{deriveArray} the names of the
categories to mark as the dichotomous selections. Required for
\code{makeMR}; optional for \code{deriveArray}; ignored in \code{makeArray}.}
}
\value{
A VariableDefinition that when added to a Dataset will create the
categorical-array or multiple-response variable. \code{deriveArray} will
make a derived array expression (or a derived multiple response expression
if \code{selections} are supplied), while \code{makeArray} and \code{makeMR}
return an expression that "binds" variables together, removing them from
independent existence.
}
\description{
Array variables are composed of a set of "subvariables" bound
together for display in the app. For example, you might have a set of
survey questions that ask how the respondent would rate a tv show from
1-5. Array variables allow you to display all of their ratings in a compact
table rather than a set of distinct variables.
}
\examples{
\dontrun{
# Derive an array from 3 existing variables (leaves the old variables in the dataset)
ds$enjoy_array <- deriveArray(ds[c("enjoy1", "enjoy2", "enjoy3)], name = "Array of brand enjoyment")

# Derive an MR from 3 existing variables (again, leaves the old variables in the dataset)
ds$enjoy_array <- deriveArray(
  ds[c("enjoy1", "enjoy2", "enjoy3)],
  name = "Array of brand enjoyment",
  selections = c("Love it", "Like it")
)

# You can also derive an MR from Variable Definitions to make arrays out of transformations
# of existing variables.
ds$overlapping_age <- deriveArray(
  list(
    VarDef(ds$age < 18, name = "Kids"),
    VarDef(ds$age >= 13 & ds$age < 20, name = "Teenagers"),
    VarDef(ds$age >= 18 & ds$age < 30, name = "Young adults"),
    VarDef(ds$age >= 18, name = "Adults"),
  ),
  name = "Overlapping age MR"
)

# `makeArray()` and `makeMR()` are like `deriveArray()`but only take existing variables
# and moves them so that they only exist within the array.
ds$enjoy_array <- makeArray(ds[c("enjoy1", "enjoy2", "enjoy3)], name = "Array of brand enjoyment")

ds$enjoy_array <- makeMR(
  ds[c("enjoy1", "enjoy2", "enjoy3)],
  name = "Array of brand enjoyment",
  selections = c("Love it", "Like it")
)
}
}
