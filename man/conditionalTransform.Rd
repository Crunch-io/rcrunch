% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/conditional-transform.R
\name{conditionalTransform}
\alias{conditionalTransform}
\title{Conditional transformation}
\usage{
conditionalTransform(..., default_value = NA, type = "categorical",
  categories = NULL)
}
\arguments{
\item{...}{a list of cases to evaluate}

\item{default_value}{a default value to use if none of the conditions are true (default: \code{NA})}

\item{type}{a character that is either "categorical" or "text" what type of output should be returned?}

\item{categories}{if \code{type="categorical"}, these are all of the categories that should be in the resulting variable}
}
\value{
either a factor (if \code{type="categorical"}) or character (if \code{type="text"})
}
\description{
Create a new variable that has values when specific conditions are met. Conditions are specified using a series of formulas: the righthand side is the condition that must be true (a \code{CrunchLogicalExpr}) and the lefthand side is where to get the value if the condition on the righthand side is true. This is commonly a crunch variable. Imagine that we have two sets of questions, one about what pets one has (Pet1, Pet2, Pet3) and then a second that asks about ones opinion of those pets that one gave in the Pet* series of questions (Opinion1, Opinion2, opinion3). What we ultimately want is what people's opinion of Cats or Dogs is, but because the value of Opinion1, Opinion2, and Opinion3 is dependent on the answer to Pet1, Pet2, and Pet3 respectively, we can't easily get the overall opinions about Cats. \code{conditionalTransform}  allows you to specify conditions like the following: if variable Pet1 is equal to 'Cat' then use the value from variable Opinion1, if variable Pet2 is equal to 'Cat' then use the value from variable Opinion2, etc. See examples below for how to write this.
}
\details{
\code{conditionalTransform} is similar to \code{makeCaseVariable} however \code{conditionalTransform} can use other crunch variables as a source of a variable, wehreas, whereas \code{makeCaseVariable} can only use characters. This additional power comes at a cost: \code{makeCaseVariable} can be executed entirely on Crunch servers, so no data needs to be downloaded or uploaded to/from the local R session. \code{conditionalTransform} on the other hand will download the data necesary to construct the new variable.
}
\examples{
\dontrun{
ds$cat_opinion <- conditionalTransform(ds$pet1 == 'Cat' ~ ds$Opinion1,
                                       ds$pet2 == 'Cat' ~ ds$Opinion2,
                                       ds$pet3 == 'Cat' ~ ds$Opinion3)
ds$dot_opinion <- conditionalTransform(ds$pet1 == 'Dog' ~ ds$Opinion1,
                                       ds$pet2 == 'Dog' ~ ds$Opinion2,
                                       ds$pet3 == 'Dog' ~ ds$Opinion3)
}

}
